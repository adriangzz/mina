
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA DIVIDE ELSE EQUAL FLOAT FLOAT_ID FUNCTION_ID GREATER_THAN GREATER_THAN_EQUAL ID IF INT INT_ID LESS_THAN LESS_THAN_EQUAL MINUS MULTIPLY NOT_EQUAL OPEN_BRACKET OPEN_PARENTHESIS PLUS PRINT PROGRAM_ID RETURN_ID SEMICOLON STRING VAR_ID\n    program : PROGRAM_ID ID SEMICOLON block\n    \n    program : PROGRAM_ID ID SEMICOLON vars functions block\n    \n    block : OPEN_BRACKET block_statue CLOSE_BRACKET\n    \n    block_statue : statue block_statue\n                 | empty\n    \n    statue : assign\n           | condition\n           | write\n           | return\n    \n    vars : VAR_ID varstype vars2\n    vars2 : varstype vars2\n          | empty\n    varstype : id_arr varstype2 COLON type SEMICOLON\n    varstype2 : COMMA id_arr varstype2\n              | empty\n    \n    id_arr : ID\n           | ARRAY\n    \n    functions : FUNCTION_ID type ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS block\n              | empty\n    \n    parameters : type ID parameters2 \n               | empty\n    parameters2 : COMMA type ID parameters2\n                | empty \n    \n    assign : ID EQUAL expression SEMICOLON\n    \n    exp : term \n        | term plus_minus exp\n    \n    term : factor \n         | factor multiply_divide term\n    \n    factor : OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n           | plus_minus_factor var_cte\n           | var_cte\n    \n    var_cte : INT \n            | FLOAT\n    \n    var_cte : ID \n    \n    plus_minus_factor : PLUS \n                      | MINUS \n                      | empty\n    \n    multiply_divide : MULTIPLY\n                    | DIVIDE \n\n    \n    plus_minus : PLUS \n               | MINUS\n    \n    condition : IF OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block else SEMICOLON\n    \n    else : ELSE block \n         | empty\n    \n    expression : exp \n               | exp GREATER_THAN exp \n               | exp GREATER_THAN_EQUAL exp \n               | exp LESS_THAN exp \n               | exp LESS_THAN_EQUAL exp \n               | exp NOT_EQUAL exp \n    \n    return : RETURN_ID expression SEMICOLON\n    \n    write : PRINT OPEN_PARENTHESIS write_exp CLOSE_PARENTHESIS SEMICOLON\n    \n    write_exp : expression\n              | expression COMMA write_exp\n              | STRING\n              | STRING COMMA write_exp\n    \n    type : INT_ID\n         | FLOAT_ID\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM_ID':([0,],[2,]),'$end':([1,5,27,31,],[0,-1,-2,-3,]),'ID':([2,7,8,13,15,16,17,18,22,23,28,29,30,33,34,35,40,41,43,44,45,49,53,61,62,63,64,65,66,67,68,69,70,71,72,79,82,83,94,98,101,111,113,],[3,19,25,19,-6,-7,-8,-9,48,25,55,-57,-58,48,48,48,48,48,-35,-36,-37,25,25,-51,48,48,48,48,48,48,-40,-41,48,-38,-39,-24,48,48,102,-52,-13,-42,114,]),'SEMICOLON':([3,29,30,31,36,37,38,39,42,46,47,48,56,74,81,84,85,86,87,88,89,90,91,92,97,104,106,112,],[4,-57,-58,-3,61,-45,-25,-27,-31,-32,-33,-34,79,-30,98,-46,-47,-48,-49,-50,-26,-28,-29,101,-59,111,-44,-43,]),'OPEN_BRACKET':([4,6,9,11,23,31,49,50,51,75,80,101,103,105,110,],[7,-59,7,-19,-59,-3,-59,-10,-12,-11,7,-13,7,7,-18,]),'VAR_ID':([4,],[8,]),'FUNCTION_ID':([6,23,49,50,51,75,101,],[10,-59,-59,-10,-12,-11,-13,]),'CLOSE_BRACKET':([7,12,13,14,15,16,17,18,32,61,79,98,111,],[-59,31,-59,-5,-6,-7,-8,-9,-4,-51,-24,-52,-42,]),'IF':([7,13,15,16,17,18,61,79,98,111,],[20,20,-6,-7,-8,-9,-51,-24,-52,-42,]),'PRINT':([7,13,15,16,17,18,61,79,98,111,],[21,21,-6,-7,-8,-9,-51,-24,-52,-42,]),'RETURN_ID':([7,13,15,16,17,18,61,79,98,111,],[22,22,-6,-7,-8,-9,-51,-24,-52,-42,]),'ARRAY':([8,23,49,53,101,],[26,26,26,26,-13,]),'INT_ID':([10,76,78,108,],[29,29,29,29,]),'FLOAT_ID':([10,76,78,108,],[30,30,30,30,]),'EQUAL':([19,],[33,]),'OPEN_PARENTHESIS':([20,21,22,33,34,35,40,55,62,63,64,65,66,67,68,69,70,71,72,82,83,],[34,35,40,40,40,40,40,78,40,40,40,40,40,40,-40,-41,40,-38,-39,40,40,]),'PLUS':([22,33,34,35,38,39,40,42,46,47,48,62,63,64,65,66,67,68,69,70,71,72,74,82,83,90,91,],[43,43,43,43,68,-27,43,-31,-32,-33,-34,43,43,43,43,43,43,-40,-41,43,-38,-39,-30,43,43,-28,-29,]),'MINUS':([22,33,34,35,38,39,40,42,46,47,48,62,63,64,65,66,67,68,69,70,71,72,74,82,83,90,91,],[44,44,44,44,69,-27,44,-31,-32,-33,-34,44,44,44,44,44,44,-40,-41,44,-38,-39,-30,44,44,-28,-29,]),'INT':([22,33,34,35,40,41,43,44,45,62,63,64,65,66,67,68,69,70,71,72,82,83,],[46,46,46,46,46,46,-35,-36,-37,46,46,46,46,46,46,-40,-41,46,-38,-39,46,46,]),'FLOAT':([22,33,34,35,40,41,43,44,45,62,63,64,65,66,67,68,69,70,71,72,82,83,],[47,47,47,47,47,47,-35,-36,-37,47,47,47,47,47,47,-40,-41,47,-38,-39,47,47,]),'COMMA':([24,25,26,37,38,39,42,46,47,48,59,60,74,77,84,85,86,87,88,89,90,91,102,114,],[53,-16,-17,-45,-25,-27,-31,-32,-33,-34,82,83,-30,53,-46,-47,-48,-49,-50,-26,-28,-29,108,108,]),'COLON':([24,25,26,52,54,77,93,],[-59,-16,-17,76,-15,-59,-14,]),'ELSE':([31,97,],[-3,105,]),'STRING':([35,82,83,],[60,60,60,]),'CLOSE_PARENTHESIS':([37,38,39,42,46,47,48,57,58,59,60,73,74,78,84,85,86,87,88,89,90,91,95,96,99,100,102,107,109,114,115,],[-45,-25,-27,-31,-32,-33,-34,80,81,-53,-55,91,-30,-59,-46,-47,-48,-49,-50,-26,-28,-29,103,-21,-54,-56,-59,-20,-23,-59,-22,]),'GREATER_THAN':([37,38,39,42,46,47,48,74,89,90,91,],[62,-25,-27,-31,-32,-33,-34,-30,-26,-28,-29,]),'GREATER_THAN_EQUAL':([37,38,39,42,46,47,48,74,89,90,91,],[63,-25,-27,-31,-32,-33,-34,-30,-26,-28,-29,]),'LESS_THAN':([37,38,39,42,46,47,48,74,89,90,91,],[64,-25,-27,-31,-32,-33,-34,-30,-26,-28,-29,]),'LESS_THAN_EQUAL':([37,38,39,42,46,47,48,74,89,90,91,],[65,-25,-27,-31,-32,-33,-34,-30,-26,-28,-29,]),'NOT_EQUAL':([37,38,39,42,46,47,48,74,89,90,91,],[66,-25,-27,-31,-32,-33,-34,-30,-26,-28,-29,]),'MULTIPLY':([39,42,46,47,48,74,91,],[71,-31,-32,-33,-34,-30,-29,]),'DIVIDE':([39,42,46,47,48,74,91,],[72,-31,-32,-33,-34,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,9,80,103,105,],[5,27,97,110,112,]),'vars':([4,],[6,]),'functions':([6,],[9,]),'empty':([6,7,13,22,23,24,33,34,35,40,49,62,63,64,65,66,67,70,77,78,82,83,97,102,114,],[11,14,14,45,51,54,45,45,45,45,51,45,45,45,45,45,45,45,54,96,45,45,106,109,109,]),'block_statue':([7,13,],[12,32,]),'statue':([7,13,],[13,13,]),'assign':([7,13,],[15,15,]),'condition':([7,13,],[16,16,]),'write':([7,13,],[17,17,]),'return':([7,13,],[18,18,]),'varstype':([8,23,49,],[23,49,49,]),'id_arr':([8,23,49,53,],[24,24,24,77,]),'type':([10,76,78,108,],[28,92,94,113,]),'expression':([22,33,34,35,40,82,83,],[36,56,57,59,73,59,59,]),'exp':([22,33,34,35,40,62,63,64,65,66,67,82,83,],[37,37,37,37,37,84,85,86,87,88,89,37,37,]),'term':([22,33,34,35,40,62,63,64,65,66,67,70,82,83,],[38,38,38,38,38,38,38,38,38,38,38,90,38,38,]),'factor':([22,33,34,35,40,62,63,64,65,66,67,70,82,83,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'plus_minus_factor':([22,33,34,35,40,62,63,64,65,66,67,70,82,83,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'var_cte':([22,33,34,35,40,41,62,63,64,65,66,67,70,82,83,],[42,42,42,42,42,74,42,42,42,42,42,42,42,42,42,]),'vars2':([23,49,],[50,75,]),'varstype2':([24,77,],[52,93,]),'write_exp':([35,82,83,],[58,99,100,]),'plus_minus':([38,],[67,]),'multiply_divide':([39,],[70,]),'parameters':([78,],[95,]),'else':([97,],[104,]),'parameters2':([102,114,],[107,115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_ID ID SEMICOLON block','program',4,'p_expression_program','parser.py',7),
  ('program -> PROGRAM_ID ID SEMICOLON vars functions block','program',6,'p_expression_program_vars','parser.py',13),
  ('block -> OPEN_BRACKET block_statue CLOSE_BRACKET','block',3,'p_block','parser.py',19),
  ('block_statue -> statue block_statue','block_statue',2,'p_block_statue','parser.py',25),
  ('block_statue -> empty','block_statue',1,'p_block_statue','parser.py',26),
  ('statue -> assign','statue',1,'p_statue','parser.py',32),
  ('statue -> condition','statue',1,'p_statue','parser.py',33),
  ('statue -> write','statue',1,'p_statue','parser.py',34),
  ('statue -> return','statue',1,'p_statue','parser.py',35),
  ('vars -> VAR_ID varstype vars2','vars',3,'p_vars','parser.py',41),
  ('vars2 -> varstype vars2','vars2',2,'p_vars','parser.py',42),
  ('vars2 -> empty','vars2',1,'p_vars','parser.py',43),
  ('varstype -> id_arr varstype2 COLON type SEMICOLON','varstype',5,'p_vars','parser.py',44),
  ('varstype2 -> COMMA id_arr varstype2','varstype2',3,'p_vars','parser.py',45),
  ('varstype2 -> empty','varstype2',1,'p_vars','parser.py',46),
  ('id_arr -> ID','id_arr',1,'p_id_arr','parser.py',52),
  ('id_arr -> ARRAY','id_arr',1,'p_id_arr','parser.py',53),
  ('functions -> FUNCTION_ID type ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS block','functions',7,'p_functions','parser.py',59),
  ('functions -> empty','functions',1,'p_functions','parser.py',60),
  ('parameters -> type ID parameters2','parameters',3,'p_parameters','parser.py',66),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',67),
  ('parameters2 -> COMMA type ID parameters2','parameters2',4,'p_parameters','parser.py',68),
  ('parameters2 -> empty','parameters2',1,'p_parameters','parser.py',69),
  ('assign -> ID EQUAL expression SEMICOLON','assign',4,'p_assign','parser.py',75),
  ('exp -> term','exp',1,'p_exp','parser.py',83),
  ('exp -> term plus_minus exp','exp',3,'p_exp','parser.py',84),
  ('term -> factor','term',1,'p_term','parser.py',94),
  ('term -> factor multiply_divide term','term',3,'p_term','parser.py',95),
  ('factor -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','factor',3,'p_factor','parser.py',105),
  ('factor -> plus_minus_factor var_cte','factor',2,'p_factor','parser.py',106),
  ('factor -> var_cte','factor',1,'p_factor','parser.py',107),
  ('var_cte -> INT','var_cte',1,'p_var_cte','parser.py',119),
  ('var_cte -> FLOAT','var_cte',1,'p_var_cte','parser.py',120),
  ('var_cte -> ID','var_cte',1,'p_var_cte_ID','parser.py',127),
  ('plus_minus_factor -> PLUS','plus_minus_factor',1,'p_plus_minus_factor','parser.py',134),
  ('plus_minus_factor -> MINUS','plus_minus_factor',1,'p_plus_minus_factor','parser.py',135),
  ('plus_minus_factor -> empty','plus_minus_factor',1,'p_plus_minus_factor','parser.py',136),
  ('multiply_divide -> MULTIPLY','multiply_divide',1,'p_multiply_divide','parser.py',143),
  ('multiply_divide -> DIVIDE','multiply_divide',1,'p_multiply_divide','parser.py',144),
  ('plus_minus -> PLUS','plus_minus',1,'p_plus_minus','parser.py',152),
  ('plus_minus -> MINUS','plus_minus',1,'p_plus_minus','parser.py',153),
  ('condition -> IF OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block else SEMICOLON','condition',7,'p_condition','parser.py',160),
  ('else -> ELSE block','else',2,'p_condition_else','parser.py',166),
  ('else -> empty','else',1,'p_condition_else','parser.py',167),
  ('expression -> exp','expression',1,'p_expression','parser.py',173),
  ('expression -> exp GREATER_THAN exp','expression',3,'p_expression','parser.py',174),
  ('expression -> exp GREATER_THAN_EQUAL exp','expression',3,'p_expression','parser.py',175),
  ('expression -> exp LESS_THAN exp','expression',3,'p_expression','parser.py',176),
  ('expression -> exp LESS_THAN_EQUAL exp','expression',3,'p_expression','parser.py',177),
  ('expression -> exp NOT_EQUAL exp','expression',3,'p_expression','parser.py',178),
  ('return -> RETURN_ID expression SEMICOLON','return',3,'p_return','parser.py',188),
  ('write -> PRINT OPEN_PARENTHESIS write_exp CLOSE_PARENTHESIS SEMICOLON','write',5,'p_write','parser.py',194),
  ('write_exp -> expression','write_exp',1,'p_write_exp','parser.py',200),
  ('write_exp -> expression COMMA write_exp','write_exp',3,'p_write_exp','parser.py',201),
  ('write_exp -> STRING','write_exp',1,'p_write_exp','parser.py',202),
  ('write_exp -> STRING COMMA write_exp','write_exp',3,'p_write_exp','parser.py',203),
  ('type -> INT_ID','type',1,'p_type','parser.py',210),
  ('type -> FLOAT_ID','type',1,'p_type','parser.py',211),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',217),
]
