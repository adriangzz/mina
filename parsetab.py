
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA DIVIDE ELSE EQUAL FLOAT FLOAT_ID FUNCTION_ID GREATER_THAN GREATER_THAN_EQUAL ID IF INT INT_ID LESS_THAN LESS_THAN_EQUAL MINUS MULTIPLY NOT_EQUAL OPEN_BRACKET OPEN_PARENTHESIS PLUS PRINT PROGRAM_ID RETURN_ID SEMICOLON STRING VAR_ID\n    program : PROGRAM_ID ID SEMICOLON block\n    \n    program : PROGRAM_ID ID SEMICOLON vars functions block\n    \n    block : OPEN_BRACKET block_statue CLOSE_BRACKET\n    \n    block_statue : statue block_statue\n                 | empty\n    \n    statue : assign\n           | condition\n           | write\n           | return\n    \n    vars : VAR_ID varstype vars2\n    vars2 : varstype vars2\n          | empty\n    varstype : ID varstype2 COLON type SEMICOLON\n    varstype2 : COMMA ID varstype2\n              | empty\n    \n    functions : FUNCTION_ID type ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS block\n              | empty\n    \n    parameters : type ID parameters2 \n               | empty\n    parameters2 : COMMA type ID parameters2\n                | empty \n    \n    assign : ID EQUAL expression SEMICOLON\n    \n    exp : term plus_minus\n    \n    term : factor multiply_divide\n    \n    factor : OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n           | plus_minus_factor var_cte\n    \n    var_cte : ID \n            | INT \n            | FLOAT\n    \n    plus_minus_factor : PLUS \n                      | MINUS \n                      | empty\n    \n    multiply_divide : MULTIPLY term \n                    | DIVIDE term \n                    | empty\n    \n    plus_minus : PLUS exp \n               | MINUS exp \n               | empty\n    \n    condition : IF OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block else SEMICOLON\n    \n    else : ELSE block \n         | empty\n    \n    expression : exp expression_def\n    expression_def : GREATER_THAN exp \n               | GREATER_THAN_EQUAL exp \n               | LESS_THAN exp \n               | LESS_THAN_EQUAL exp \n               | NOT_EQUAL exp \n               | empty\n    \n    return : RETURN_ID expression SEMICOLON\n    \n    write : PRINT OPEN_PARENTHESIS write_exp CLOSE_PARENTHESIS SEMICOLON\n    \n    write_exp : expression\n              | expression COMMA write_exp\n              | STRING\n              | STRING COMMA write_exp\n    \n    type : INT_ID\n         | FLOAT_ID\n    empty :'
    
_lr_action_items = {'PROGRAM_ID':([0,],[2,]),'$end':([1,5,25,29,],[0,-1,-2,-3,]),'ID':([2,7,8,13,15,16,17,18,22,23,26,27,28,31,32,33,38,39,40,41,42,43,47,55,57,58,59,60,61,64,65,68,69,80,83,84,97,101,104,114,116,],[3,19,24,19,-6,-7,-8,-9,-57,24,49,-55,-56,-57,-57,-57,-57,73,-30,-31,-32,24,78,-49,-57,-57,-57,-57,-57,-57,-57,-57,-57,-22,-57,-57,105,-50,-13,-39,117,]),'SEMICOLON':([3,27,28,29,34,35,36,37,50,56,62,63,66,67,70,72,73,74,75,82,85,86,87,88,89,90,91,92,93,94,95,100,107,109,115,],[4,-55,-56,-3,55,-57,-57,-57,80,-42,-48,-23,-38,-24,-35,-26,-27,-28,-29,101,-43,-44,-45,-46,-47,-36,-37,-33,-34,-25,104,-57,114,-41,-40,]),'OPEN_BRACKET':([4,6,9,11,23,29,43,44,45,76,81,104,106,108,113,],[7,-57,7,-17,-57,-3,-57,-10,-12,-11,7,-13,7,7,-16,]),'VAR_ID':([4,],[8,]),'FUNCTION_ID':([6,23,43,44,45,76,104,],[10,-57,-57,-10,-12,-11,-13,]),'CLOSE_BRACKET':([7,12,13,14,15,16,17,18,30,55,80,101,114,],[-57,29,-57,-5,-6,-7,-8,-9,-4,-49,-22,-50,-39,]),'IF':([7,13,15,16,17,18,55,80,101,114,],[20,20,-6,-7,-8,-9,-49,-22,-50,-39,]),'PRINT':([7,13,15,16,17,18,55,80,101,114,],[21,21,-6,-7,-8,-9,-49,-22,-50,-39,]),'RETURN_ID':([7,13,15,16,17,18,55,80,101,114,],[22,22,-6,-7,-8,-9,-49,-22,-50,-39,]),'INT_ID':([10,77,79,111,],[27,27,27,27,]),'FLOAT_ID':([10,77,79,111,],[28,28,28,28,]),'EQUAL':([19,],[31,]),'OPEN_PARENTHESIS':([20,21,22,31,32,33,38,49,57,58,59,60,61,64,65,68,69,83,84,],[32,33,38,38,38,38,38,79,38,38,38,38,38,38,38,38,38,38,38,]),'PLUS':([22,31,32,33,36,37,38,57,58,59,60,61,64,65,67,68,69,70,72,73,74,75,83,84,92,93,94,],[40,40,40,40,64,-57,40,40,40,40,40,40,40,40,-24,40,40,-35,-26,-27,-28,-29,40,40,-33,-34,-25,]),'MINUS':([22,31,32,33,36,37,38,57,58,59,60,61,64,65,67,68,69,70,72,73,74,75,83,84,92,93,94,],[41,41,41,41,65,-57,41,41,41,41,41,41,41,41,-24,41,41,-35,-26,-27,-28,-29,41,41,-33,-34,-25,]),'INT':([22,31,32,33,38,39,40,41,42,57,58,59,60,61,64,65,68,69,83,84,],[-57,-57,-57,-57,-57,74,-30,-31,-32,-57,-57,-57,-57,-57,-57,-57,-57,-57,-57,-57,]),'FLOAT':([22,31,32,33,38,39,40,41,42,57,58,59,60,61,64,65,68,69,83,84,],[-57,-57,-57,-57,-57,75,-30,-31,-32,-57,-57,-57,-57,-57,-57,-57,-57,-57,-57,-57,]),'COMMA':([24,35,36,37,53,54,56,62,63,66,67,70,72,73,74,75,78,85,86,87,88,89,90,91,92,93,94,105,117,],[47,-57,-57,-57,83,84,-42,-48,-23,-38,-24,-35,-26,-27,-28,-29,47,-43,-44,-45,-46,-47,-36,-37,-33,-34,-25,111,111,]),'COLON':([24,46,48,78,96,],[-57,77,-15,-57,-14,]),'ELSE':([29,100,],[-3,108,]),'STRING':([33,83,84,],[54,54,54,]),'GREATER_THAN':([35,36,37,63,66,67,70,72,73,74,75,90,91,92,93,94,],[57,-57,-57,-23,-38,-24,-35,-26,-27,-28,-29,-36,-37,-33,-34,-25,]),'GREATER_THAN_EQUAL':([35,36,37,63,66,67,70,72,73,74,75,90,91,92,93,94,],[58,-57,-57,-23,-38,-24,-35,-26,-27,-28,-29,-36,-37,-33,-34,-25,]),'LESS_THAN':([35,36,37,63,66,67,70,72,73,74,75,90,91,92,93,94,],[59,-57,-57,-23,-38,-24,-35,-26,-27,-28,-29,-36,-37,-33,-34,-25,]),'LESS_THAN_EQUAL':([35,36,37,63,66,67,70,72,73,74,75,90,91,92,93,94,],[60,-57,-57,-23,-38,-24,-35,-26,-27,-28,-29,-36,-37,-33,-34,-25,]),'NOT_EQUAL':([35,36,37,63,66,67,70,72,73,74,75,90,91,92,93,94,],[61,-57,-57,-23,-38,-24,-35,-26,-27,-28,-29,-36,-37,-33,-34,-25,]),'CLOSE_PARENTHESIS':([35,36,37,51,52,53,54,56,62,63,66,67,70,71,72,73,74,75,79,85,86,87,88,89,90,91,92,93,94,98,99,102,103,105,110,112,117,118,],[-57,-57,-57,81,82,-51,-53,-42,-48,-23,-38,-24,-35,94,-26,-27,-28,-29,-57,-43,-44,-45,-46,-47,-36,-37,-33,-34,-25,106,-19,-52,-54,-57,-18,-21,-57,-20,]),'MULTIPLY':([37,72,73,74,75,94,],[68,-26,-27,-28,-29,-25,]),'DIVIDE':([37,72,73,74,75,94,],[69,-26,-27,-28,-29,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,9,81,106,108,],[5,25,100,113,115,]),'vars':([4,],[6,]),'functions':([6,],[9,]),'empty':([6,7,13,22,23,24,31,32,33,35,36,37,38,43,57,58,59,60,61,64,65,68,69,78,79,83,84,100,105,117,],[11,14,14,42,45,48,42,42,42,62,66,70,42,45,42,42,42,42,42,42,42,42,42,48,99,42,42,109,112,112,]),'block_statue':([7,13,],[12,30,]),'statue':([7,13,],[13,13,]),'assign':([7,13,],[15,15,]),'condition':([7,13,],[16,16,]),'write':([7,13,],[17,17,]),'return':([7,13,],[18,18,]),'varstype':([8,23,43,],[23,43,43,]),'type':([10,77,79,111,],[26,95,97,116,]),'expression':([22,31,32,33,38,83,84,],[34,50,51,53,71,53,53,]),'exp':([22,31,32,33,38,57,58,59,60,61,64,65,83,84,],[35,35,35,35,35,85,86,87,88,89,90,91,35,35,]),'term':([22,31,32,33,38,57,58,59,60,61,64,65,68,69,83,84,],[36,36,36,36,36,36,36,36,36,36,36,36,92,93,36,36,]),'factor':([22,31,32,33,38,57,58,59,60,61,64,65,68,69,83,84,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'plus_minus_factor':([22,31,32,33,38,57,58,59,60,61,64,65,68,69,83,84,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'vars2':([23,43,],[44,76,]),'varstype2':([24,78,],[46,96,]),'write_exp':([33,83,84,],[52,102,103,]),'expression_def':([35,],[56,]),'plus_minus':([36,],[63,]),'multiply_divide':([37,],[67,]),'var_cte':([39,],[72,]),'parameters':([79,],[98,]),'else':([100,],[107,]),'parameters2':([105,117,],[110,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_ID ID SEMICOLON block','program',4,'p_expression_program','calcyacc.py',7),
  ('program -> PROGRAM_ID ID SEMICOLON vars functions block','program',6,'p_expression_program_vars','calcyacc.py',14),
  ('block -> OPEN_BRACKET block_statue CLOSE_BRACKET','block',3,'p_block','calcyacc.py',20),
  ('block_statue -> statue block_statue','block_statue',2,'p_block_statue','calcyacc.py',27),
  ('block_statue -> empty','block_statue',1,'p_block_statue','calcyacc.py',28),
  ('statue -> assign','statue',1,'p_statue','calcyacc.py',35),
  ('statue -> condition','statue',1,'p_statue','calcyacc.py',36),
  ('statue -> write','statue',1,'p_statue','calcyacc.py',37),
  ('statue -> return','statue',1,'p_statue','calcyacc.py',38),
  ('vars -> VAR_ID varstype vars2','vars',3,'p_vars','calcyacc.py',45),
  ('vars2 -> varstype vars2','vars2',2,'p_vars','calcyacc.py',46),
  ('vars2 -> empty','vars2',1,'p_vars','calcyacc.py',47),
  ('varstype -> ID varstype2 COLON type SEMICOLON','varstype',5,'p_vars','calcyacc.py',48),
  ('varstype2 -> COMMA ID varstype2','varstype2',3,'p_vars','calcyacc.py',49),
  ('varstype2 -> empty','varstype2',1,'p_vars','calcyacc.py',50),
  ('functions -> FUNCTION_ID type ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS block','functions',7,'p_functions','calcyacc.py',56),
  ('functions -> empty','functions',1,'p_functions','calcyacc.py',57),
  ('parameters -> type ID parameters2','parameters',3,'p_parameters','calcyacc.py',63),
  ('parameters -> empty','parameters',1,'p_parameters','calcyacc.py',64),
  ('parameters2 -> COMMA type ID parameters2','parameters2',4,'p_parameters','calcyacc.py',65),
  ('parameters2 -> empty','parameters2',1,'p_parameters','calcyacc.py',66),
  ('assign -> ID EQUAL expression SEMICOLON','assign',4,'p_assign','calcyacc.py',72),
  ('exp -> term plus_minus','exp',2,'p_exp','calcyacc.py',79),
  ('term -> factor multiply_divide','term',2,'p_term','calcyacc.py',85),
  ('factor -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','factor',3,'p_factor','calcyacc.py',91),
  ('factor -> plus_minus_factor var_cte','factor',2,'p_factor','calcyacc.py',92),
  ('var_cte -> ID','var_cte',1,'p_var_cte','calcyacc.py',98),
  ('var_cte -> INT','var_cte',1,'p_var_cte','calcyacc.py',99),
  ('var_cte -> FLOAT','var_cte',1,'p_var_cte','calcyacc.py',100),
  ('plus_minus_factor -> PLUS','plus_minus_factor',1,'p_plus_minus_factor','calcyacc.py',106),
  ('plus_minus_factor -> MINUS','plus_minus_factor',1,'p_plus_minus_factor','calcyacc.py',107),
  ('plus_minus_factor -> empty','plus_minus_factor',1,'p_plus_minus_factor','calcyacc.py',108),
  ('multiply_divide -> MULTIPLY term','multiply_divide',2,'p_multiply_divide','calcyacc.py',114),
  ('multiply_divide -> DIVIDE term','multiply_divide',2,'p_multiply_divide','calcyacc.py',115),
  ('multiply_divide -> empty','multiply_divide',1,'p_multiply_divide','calcyacc.py',116),
  ('plus_minus -> PLUS exp','plus_minus',2,'p_plus_minus','calcyacc.py',122),
  ('plus_minus -> MINUS exp','plus_minus',2,'p_plus_minus','calcyacc.py',123),
  ('plus_minus -> empty','plus_minus',1,'p_plus_minus','calcyacc.py',124),
  ('condition -> IF OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block else SEMICOLON','condition',7,'p_condition','calcyacc.py',130),
  ('else -> ELSE block','else',2,'p_condition_else','calcyacc.py',136),
  ('else -> empty','else',1,'p_condition_else','calcyacc.py',137),
  ('expression -> exp expression_def','expression',2,'p_expression','calcyacc.py',143),
  ('expression_def -> GREATER_THAN exp','expression_def',2,'p_expression','calcyacc.py',144),
  ('expression_def -> GREATER_THAN_EQUAL exp','expression_def',2,'p_expression','calcyacc.py',145),
  ('expression_def -> LESS_THAN exp','expression_def',2,'p_expression','calcyacc.py',146),
  ('expression_def -> LESS_THAN_EQUAL exp','expression_def',2,'p_expression','calcyacc.py',147),
  ('expression_def -> NOT_EQUAL exp','expression_def',2,'p_expression','calcyacc.py',148),
  ('expression_def -> empty','expression_def',1,'p_expression','calcyacc.py',149),
  ('return -> RETURN_ID expression SEMICOLON','return',3,'p_return','calcyacc.py',155),
  ('write -> PRINT OPEN_PARENTHESIS write_exp CLOSE_PARENTHESIS SEMICOLON','write',5,'p_write','calcyacc.py',161),
  ('write_exp -> expression','write_exp',1,'p_write_exp','calcyacc.py',167),
  ('write_exp -> expression COMMA write_exp','write_exp',3,'p_write_exp','calcyacc.py',168),
  ('write_exp -> STRING','write_exp',1,'p_write_exp','calcyacc.py',169),
  ('write_exp -> STRING COMMA write_exp','write_exp',3,'p_write_exp','calcyacc.py',170),
  ('type -> INT_ID','type',1,'p_type','calcyacc.py',176),
  ('type -> FLOAT_ID','type',1,'p_type','calcyacc.py',177),
  ('empty -> <empty>','empty',0,'p_empty','calcyacc.py',183),
]
